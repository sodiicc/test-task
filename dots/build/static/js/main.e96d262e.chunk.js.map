{"version":3,"sources":["components/GameField/FieldItem.js","components/LeaderBoard/index.js","components/Settings/SetName.js","components/Settings/PlayBtn.js","components/Settings/SetDifficulty.js","redux/reducer.js","components/Settings/index.js","components/GameField/index.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["FieldItem","props","field","React","createRef","this","current","name","random","classList","add","color","ref","className","id","Component","LeaderBoard","winnerName","winnerDate","SetName","console","log","type","placeholder","value","onChange","e","setName","target","PlayBtn","onClick","setPlaying","setBtnText","setFieldGrid","size","array","i","arr","j","push","makeArray","fieldSize","btnText","SetDifficulty","difficulty","setDifficulty","getWinnersSaga","addWinnerSaga","getSettingsSaga","mainSaga","GET_WINNERS","GET_SETTINGS","SET_WINNERS","SET_SETTINGS","ADD_WINNER","SET_NAME","SET_MESSAGE","SET_BTN_TEXT","SET_DIFFICULTY","SET_PLAYING","SET_FIELD_GRID","payload","take","fetch","req","json","res","put","sort","a","b","method","headers","body","JSON","stringify","startState","winners","settings","delay","userName","message","text","isPlaying","fieldGrid","all","Settings","connect","state","userScore","compScore","isClick","GameField","getWinners","getSettings","addWinner","setMessage","randomFunc","Math","ceil","pow","moreThenHalf","floor","useState","setColor","step","setStep","randomArray","setRandomArray","setRandom","arrayField","grid","key","useEffect","setTimeout","randomItem","includes","s","newDate","Date","hours","getHours","mins","getMinutes","newWinner","date","getFullYear","getMonth","getDate","map","item","GameStyle","style","Field","width","height","styled","div","rootSaga","reducer","combineReducers","action","saga","createSagaMiddleware","store","createStore","applyMiddleware","run","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e96d262e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n//// class component for REF /////////////\r\n\r\nclass FieldItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.field = React.createRef();\r\n  }\r\n\r\n  render() {\r\n    if (this.field.current) {\r\n      if (this.props.name === this.props.random)\r\n        this.field.current.classList.add(this.props.color);\r\n    }\r\n    return (\r\n      <div ref={this.field} className={`fieldItem`} id={this.props.name}></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FieldItem;\r\n","import React from 'react';\r\n\r\nconst LeaderBoard = props => {\r\n  return <div className='winner'>\r\n    <div>{props.winnerName}</div> <div>{props.winnerDate}</div>\r\n  </div>\r\n}\r\n\r\nexport default LeaderBoard","import React from \"react\";\r\n\r\nconst SetName = props => {\r\n  console.log(\"props\", props.name);\r\n\r\n  const handleChange = e => {\r\n    props.setName(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      placeholder=\"Enter your name\"\r\n      value={props.name}\r\n      onChange={handleChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SetName;\r\n","import React from \"react\";\r\n\r\nlet makeArray = size => {\r\n  let array = [];\r\n  for (let i = 0; i < size; i++) {\r\n    let arr = [];\r\n    for (let j = 0; j < size; j++) {\r\n      arr.push(\"fieldItem\");\r\n    }\r\n    array.push(arr);\r\n  }\r\n  return array;\r\n};\r\n\r\nconst PlayBtn = props => {\r\n  const handleClick = () => {\r\n    props.setPlaying(true);\r\n    props.setBtnText(\"Play again\");\r\n    props.setFieldGrid(makeArray(props.fieldSize));\r\n  };\r\n\r\n  return <button onClick={handleClick}>{props.btnText}</button>;\r\n};\r\n\r\nexport default PlayBtn;\r\n","import React from \"react\";\r\n\r\nconst SetDifficulty = props => {\r\n  console.log(\"propsDIFF\", props);\r\n\r\n  const handleChange = e => {\r\n    props.setDifficulty(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <select value={props.difficulty} onChange={handleChange}>\r\n      <option value=\"easy\">easy</option>\r\n      <option value=\"normal\">normal</option>\r\n      <option value=\"hard\">hard</option>\r\n      <option value=\"nightmare\">nightmare</option>\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default SetDifficulty;\r\n","import { put, take, all } from \"redux-saga/effects\";\r\n\r\n//////////// action types////////////\r\nconst GET_WINNERS = \"GET_WINNERS\";\r\nconst GET_SETTINGS = \"GET_SETTINGS\";\r\nconst SET_WINNERS = \"SET_WINNERS\";\r\nconst SET_SETTINGS = \"SET_SETTINGS\";\r\nconst ADD_WINNER = \"ADD_WINNER\";\r\nconst SET_NAME = \"SET_NAME\";\r\nconst SET_MESSAGE = \"SET_MESSAGE\";\r\nconst SET_BTN_TEXT = \"SET_BTN_TEXT\";\r\nconst SET_DIFFICULTY = \"SET_DIFFICULTY\";\r\nconst SET_PLAYING = \"SET_PLAYING\";\r\nconst SET_FIELD_GRID = \"SET_FIELD_GRID\";\r\n\r\n///////////// action creators ////////////////\r\nexport const getWinners = () => {\r\n  return {\r\n    type: GET_WINNERS\r\n  };\r\n};\r\nexport const getSettings = payload => {\r\n  return {\r\n    type: GET_SETTINGS,\r\n    payload\r\n  };\r\n};\r\nexport const addWinner = payload => {\r\n  return {\r\n    type: ADD_WINNER,\r\n    payload\r\n  };\r\n};\r\nexport const setName = payload => {\r\n  return {\r\n    type: SET_NAME,\r\n    payload\r\n  };\r\n};\r\nexport const setMessage = payload => {\r\n  return {\r\n    type: SET_MESSAGE,\r\n    payload\r\n  };\r\n};\r\nexport const setBtnText = payload => {\r\n  return {\r\n    type: SET_BTN_TEXT,\r\n    payload\r\n  };\r\n};\r\nexport const setDifficulty = payload => {\r\n  return {\r\n    type: SET_DIFFICULTY,\r\n    payload\r\n  };\r\n};\r\nexport const setPlaying = payload => {\r\n  return {\r\n    type: SET_PLAYING,\r\n    payload\r\n  };\r\n};\r\nexport const setFieldGrid = payload => {\r\n  return {\r\n    type: SET_FIELD_GRID,\r\n    payload\r\n  };\r\n};\r\n\r\n///////sagas ///////////\r\n\r\nfunction* getWinnersSaga() {\r\n  while (true) {\r\n    yield take(GET_WINNERS);\r\n    const req = yield fetch(\"/winners\");\r\n    const res = yield req.json();\r\n    yield put({ type: SET_WINNERS, payload: res.sort((a, b) => b - a) });\r\n  }\r\n}\r\n\r\nfunction* addWinnerSaga() {\r\n  while (true) {\r\n    const { payload } = yield take(ADD_WINNER);\r\n    yield fetch(\"/add_winner\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(payload)\r\n    });\r\n  }\r\n}\r\n\r\nfunction* getSettingsSaga() {\r\n  while (true) {\r\n    const { payload } = yield take(GET_SETTINGS);\r\n    const req = yield fetch(\"/settings\");\r\n    const res = yield req.json();\r\n    yield put({ type: SET_SETTINGS, payload: res[payload] });\r\n  }\r\n}\r\n\r\n////////////////// reducer//////////////\r\n\r\nlet startState = {\r\n  winners: [],\r\n  settings: { field: 5, delay: 700 },\r\n  userName: \"\",\r\n  message: { color: \"black\", text: \"try to win\" },\r\n  btnText: \"Play\",\r\n  difficulty: \"easy\",\r\n  isPlaying: false,\r\n  fieldGrid: []\r\n};\r\n\r\nexport function mainReducer(state = startState, action) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case SET_WINNERS:\r\n      return { ...state, winners: payload };\r\n    case SET_SETTINGS:\r\n      return { ...state, settings: payload };\r\n    case SET_NAME:\r\n      return { ...state, userName: payload };\r\n    case SET_MESSAGE:\r\n      return { ...state, message: payload };\r\n    case SET_BTN_TEXT:\r\n      return { ...state, btnText: payload };\r\n    case SET_DIFFICULTY:\r\n      return { ...state, difficulty: payload };\r\n    case SET_PLAYING:\r\n      return { ...state, isPlaying: payload };\r\n    case SET_FIELD_GRID:\r\n      return { ...state, fieldGrid: payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n////////////// root saga////////////\r\nexport function* mainSaga() {\r\n  yield all([getWinnersSaga(), getSettingsSaga(), addWinnerSaga()]);\r\n}\r\n","import React from \"react\";\r\nimport SetName from \"./SetName\";\r\nimport PlayBtn from \"./PlayBtn\";\r\nimport SetDifficulty from \"./SetDifficulty\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setName,\r\n  setPlaying,\r\n  setDifficulty,\r\n  setBtnText,\r\n  setFieldGrid\r\n} from \"../../redux/reducer\";\r\n\r\nconst mapStateToProps = state => {\r\n  console.log(\"state\", state);\r\n  return {\r\n    name: state.settings.userName,\r\n    btnText: state.settings.btnText,\r\n    difficulty: state.settings.difficulty,\r\n    fieldSize: state.settings.settings.field\r\n  };\r\n};\r\n\r\nconst Settings = connect(\r\n  mapStateToProps,\r\n  { setName, setDifficulty, setPlaying, setBtnText, setFieldGrid }\r\n)(props => {\r\n  return (\r\n    <div>\r\n      <SetDifficulty\r\n        setDifficulty={props.setDifficulty}\r\n        difficulty={props.difficulty}\r\n      />\r\n      <SetName setName={props.setName} />\r\n      <PlayBtn\r\n        btnText={props.btnText}\r\n        setPlaying={props.setPlaying}\r\n        setBtnText={props.setBtnText}\r\n        setFieldGrid={props.setFieldGrid}\r\n        fieldSize={props.fieldSize}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Settings;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport FieldItem from \"./FieldItem\";\r\nimport LeaderBoard from \"../LeaderBoard\";\r\nimport Settings from \"../Settings\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getWinners,\r\n  getSettings,\r\n  addWinner,\r\n  setMessage,\r\n  setBtnText,\r\n  setDifficulty,\r\n  setPlaying,\r\n  setFieldGrid\r\n} from \"../../redux/reducer\";\r\n\r\nlet userScore = 0;\r\nlet compScore = 0;\r\nlet isClick = false;\r\n\r\nconst mapStateToProps = state => {\r\n  console.log(\"statdfsde\", state);\r\n  return {\r\n    delay: state.settings.settings.delay,\r\n    fieldSize: state.settings.settings.field,\r\n    message: state.settings.message,\r\n    fieldGrid: state.settings.fieldGrid,\r\n    isPlaying: state.settings.isPlaying,\r\n    difficulty: state.settings.difficulty,\r\n    userName: state.settings.userName,\r\n    winners: state.settings.winners\r\n  };\r\n};\r\n\r\n///COMPONENT ////////////////////////////\r\n\r\nconst GameField = connect(\r\n  mapStateToProps,\r\n  {\r\n    getWinners,\r\n    getSettings,\r\n    addWinner,\r\n    setDifficulty,\r\n    setMessage,\r\n    setBtnText,\r\n    setPlaying,\r\n    setFieldGrid\r\n  }\r\n)(props => {\r\n  const randomFunc = () => {\r\n    return Math.ceil(Math.random() * Math.pow(fieldSize, 2));\r\n  };\r\n  const moreThenHalf = () => {\r\n    return Math.floor(Math.pow(fieldSize, 2) / 2) + 1;\r\n  };\r\n\r\n  let delay = props.delay;\r\n  let fieldSize = props.fieldSize;\r\n  let message = props.message.text;\r\n\r\n  let [color, setColor] = useState(\"#eee\");\r\n  let [step, setStep] = useState(0);\r\n  let [randomArray, setRandomArray] = useState([]);\r\n  let [random, setRandom] = useState(randomFunc());\r\n\r\n  let arrayField = [];\r\n  for (let i = 1; i <= Math.pow(fieldSize, 2); i++) {\r\n    arrayField.push(\r\n      <FieldItem\r\n        fieldSize={fieldSize}\r\n        setFieldGrid={props.setFieldGrid}\r\n        grid={props.fieldGrid}\r\n        isPlaying={props.isPlaying}\r\n        color={color}\r\n        random={random}\r\n        key={i}\r\n        name={i}\r\n      />\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    props.getWinners();\r\n    props.getSettings(props.difficulty);\r\n    if (props.isPlaying) {\r\n      setColor(\"#eee\");\r\n      setTimeout(() => {\r\n        let randomItem = randomFunc();\r\n\r\n        while (randomArray.includes(randomItem)) {\r\n          randomItem = randomFunc();\r\n        }\r\n\r\n        setRandomArray([...randomArray, randomItem]);\r\n        setRandom(randomItem);\r\n        if (userScore < moreThenHalf() && compScore < moreThenHalf()) {\r\n          setColor(\"blue\");\r\n          setTimeout(() => {\r\n            if (isClick) {\r\n              userScore += 1;\r\n            } else {\r\n              compScore += 1;\r\n              setColor(\"pointDown\");\r\n            }\r\n            setRandom(null);\r\n            setStep(s => s + 1);\r\n            isClick = false;\r\n          }, delay);\r\n        } else {\r\n          let newDate = new Date();\r\n          let hours = newDate.getHours();\r\n          let mins = newDate.getMinutes();\r\n          if (hours < 10) {\r\n            hours = \"0\" + hours;\r\n          }\r\n          if (mins < 10) {\r\n            mins = \"0\" + mins;\r\n          }\r\n          let date =\r\n            newDate.getFullYear() +\r\n            \"/\" +\r\n            (1 + newDate.getMonth()) +\r\n            \"/\" +\r\n            newDate.getDate() +\r\n            \"/\" +\r\n            hours +\r\n            \":\" +\r\n            mins;\r\n\r\n          let newWinner;\r\n\r\n          if (userScore >= moreThenHalf()) {\r\n            props.setPlaying(false);\r\n            userScore = 0;\r\n            compScore = 0;\r\n            setRandomArray([]);\r\n            newWinner = { name: props.userName, date };\r\n\r\n            props.setMessage({ color: \"green\", text: \"YOU WIN\" });\r\n          } else if (compScore >= moreThenHalf()) {\r\n            props.setMessage({ color: \"red\", text: \"YOU LOSE\" });\r\n            newWinner = { name: \"Computer AI\", date };\r\n          } else {\r\n            props.setMessage({ color: \"brown\", text: \"DRAW\" });\r\n            newWinner = { name: \"DRAW\", date };\r\n          }\r\n          props.addWinner(newWinner);\r\n\r\n          props.setBtnText(\"Play again\");\r\n        }\r\n      }, 700 + randomFunc() * 15);\r\n    }\r\n  }, [step, props.isPlaying]);\r\n\r\n  const handleClick = e => {\r\n    if (e.target.id) {\r\n      if (+e.target.id === random) {\r\n        e.target.classList.add(\"pointUp\");\r\n        isClick = true;\r\n      }\r\n    }\r\n  };\r\n\r\n  let winners = props.winners.map(item => {\r\n    return (\r\n      <div key={Math.random()}>\r\n        <LeaderBoard\r\n          winnerName={item.name !== \"\" ? item.name : \"noname\"}\r\n          winnerDate={item.date}\r\n        />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <GameStyle>\r\n      <div className=\"mainField\">\r\n        <Settings />\r\n        <h1 style={{ color: props.message.color }}>{message}</h1>\r\n        <Field\r\n          style={{\r\n            width: `${60 * fieldSize}px`,\r\n            height: `${60 * fieldSize}px`\r\n          }}\r\n          onClick={handleClick}\r\n        >\r\n          {arrayField}\r\n        </Field>\r\n        <h2> User score {userScore}</h2>\r\n        <h2>Computer AI score {compScore}</h2>\r\n      </div>\r\n      <div className=\"winnerBoard\">\r\n        <h2>Leader Board</h2>\r\n        {winners}\r\n      </div>\r\n    </GameStyle>\r\n  );\r\n});\r\n\r\nconst Field = styled.div`\r\n  display: flex;\r\n  margin: 0 auto;\r\n  flex-wrap: wrap;\r\n  border: 2px blue solid;\r\n\r\n  .fieldItem {\r\n    background-color: #eee;\r\n    width: 58px;\r\n    height: 58px;\r\n    border: 1px green solid;\r\n  }\r\n  .blue {\r\n    background-color: blue;\r\n  }\r\n\r\n  .pointUp {\r\n    background-color: green;\r\n  }\r\n  .pointDown {\r\n    background-color: red;\r\n  }\r\n`;\r\n\r\nconst GameStyle = styled.div`\r\n  padding-top: 50px;\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  .winnerBoard {\r\n    width: 300px;\r\n    margin-left: 150px;\r\n    height: 700px;\r\n    overflow: auto;\r\n  }\r\n  .winner {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin: 5px;\r\n    padding: 10px;\r\n    background-color: #cfc;\r\n    font-weight: 700;\r\n  }\r\n`;\r\n\r\nexport default GameField;\r\n","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport {all} from \"redux-saga/effects\";\r\nimport {mainSaga, mainReducer} from \"./reducer\";\r\n\r\n\r\n/////// reducer/////////////\r\n\r\nconst reducer = combineReducers({\r\n  settings: mainReducer\r\n});\r\n\r\n///////// root saga/////////\r\n\r\nfunction* rootSaga() {\r\n  yield all([\r\n    mainSaga()\r\n  ]);\r\n}\r\n\r\nconst saga = createSagaMiddleware();\r\n\r\nconst store = createStore(reducer, applyMiddleware(saga));\r\nsaga.run(rootSaga);\r\n\r\nexport default store;","import React from \"react\";\nimport \"./App.css\";\nimport GameField from \"./components/GameField\";\nimport {Provider} from 'react-redux'\nimport store from './redux/store'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n    <div className=\"App\">\n      <GameField />\n    </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}